kable(col.names = c("Mentioned", "Redacted sentences"),
digits = c(0,1))
rr_sentences %>%
group_by(mentioned_intel_agency) %>%
summarise(n_redacted = 100*mean(redacted)) %>%
mutate(mentioned_intel_agency)
kable(col.names = c("Mentioned", "% redacted sentences"),
digits = c(0,1))
rr_sentences %>%
group_by(mentioned_intel_agency) %>%
summarise(n_redacted = 100*mean(redacted)) %>%
mutate(mentioned_intel_agency = c("No", "Yes")) %>%
kable(col.names = c("Mentioned", "% redacted sentences"),
digits = c(0,1))
rr_sentences %>%
group_by(mentioned_intel_agency) %>%
summarise(n_redacted = 100*mean(redacted)) %>%
mutate(mentioned_intel_agency = c("No intel service", "One or more")) %>%
kable(col.names = c("Mentioned", "% redacted sentences"),
digits = c(0,1))
rr_sentences %>%
group_by(mentioned_intel_agency) %>%
summarise(n_redacted = 100*mean(redacted)) %>%
mutate(mentioned_intel_agency = c("No intel service", "One or more")) %>%
kable(col.names = c("Mentioned", "% of sentences redacted"),
digits = c(0,1))
43.0/12.2
any_redact_tab <- rr_sentences %>%
group_by(mentioned_intel_agency) %>%
summarise(n_redacted = 100*mean(redacted)) %>%
mutate(mentioned_intel_agency = c("No intel service",
"One or more"))
any_redact_tab %>%
kable(col.names = c("Mentioned", "% of sentences redacted"),
digits = c(0,1))
any_redact_tab
any_redact_tab$n_redacted
with(any_redact_tab, n_redacted[2] / n_redacted[1])
round(with(any_redact_tab, n_redacted[2] / n_redacted[1]),2)
levels(rr_sentences$mentioned_code)
levels(as.factor(rr_sentences$mentioned_code))
unique(rr_sentences$mentioned_code))
unique(rr_sentences$mentioned_code)
service_mentions <- tibble(
mentioned_code = c("000", "111", "001", "010", "100", "011", "101", "110"),
mentioned_services = c("None mentioned",
"All",
"GCHQ",
"MI6/SIS",
"MI5",
"MI6 & GCHQ",
"MI5 & GCHQ",
"MI5 & MI6")
service_mentions <- tibble(
mentioned_code = c("000", "111", "001", "010", "100", "011", "101", "110"),
mentioned_services = c("None mentioned",
"All",
"GCHQ",
"MI6/SIS",
"MI5",
"MI6 & GCHQ",
"MI5 & GCHQ",
"MI5 & MI6")
)
service_mentions <- tibble(
mentioned_code = c("000", "111", "001", "010",
"100", "011", "101", "110"),
mentioned_services = c("None mentioned",
"All",
"GCHQ",
"MI6/SIS",
"MI5",
"MI6 & GCHQ",
"MI5 & GCHQ",
"MI5 & MI6")
)
?join
service_mentions <- tibble(
mentioned_code = c("000", "111", "001", "010",
"100", "011", "101", "110"),
mentioned_services = c("None mentioned",
"All",
"GCHQ",
"MI6/SIS",
"MI5",
"MI6 & GCHQ",
"MI5 & GCHQ",
"MI5 & MI6")
)
rr_sentences <- left_join(rr_sentences, service_mentions)
rr_sentences %>%
count(mentioned_services) %>%
arrange(desc(n)) %>%
kable()
rr_sentences %>%
count(mentioned_services) %>%
arrange(desc(n)) %>%
kable(col.names = "Service(s) mentioned", "n")
rr_sentences %>%
count(mentioned_services) %>%
arrange(desc(n)) %>%
kable(col.names = c("Service(s) mentioned", "n"))
rr_sentences %>%
group_by(mentioned_services) %>%
summarise(percentage_redacted = 100*mean(redacted)) %>%
arrange(desc(percentage_redacted)) %>%
kable(col.names = c("Agencies code", "% of sentences redacted"),
digits = c(0,1))
rr_sentences %>%
group_by(mentioned_services) %>%
summarise(percentage_redacted = 100*mean(redacted)) %>%
arrange(desc(percentage_redacted)) %>%
kable(col.names = c("Mentioned services", "% of sentences redacted"),
digits = c(0,1))
rr_sentences %>%
filter(mentioned_intel_agency == 1 & redacted == 0) %>%
mutate(nice_sentence = gsub(pattern = "\\*\\*\\*",
replace = "\\*\\*\\*[redacted]\\*\\*\\*",
x = sentence)
) %>%
select(page, nice_sentence) %>%
kable()
rr_sentences %>%
filter(mentioned_intel_agency == 1 & redacted == 0) %>%
mutate(nice_sentence = gsub(pattern = "\\*\\*\\*",
replace = "\\*\\*\\*[redacted]\\*\\*\\*",
x = sentence)
) %>%
select(mentioned_intel_agency, nice_sentence) %>%
kable()
rr_words <- rr_tib %>%
select(page,text)
unnest_tokens(word, # the name of the new column
text) # the column with text
library(tidyverse)
library(knitr)
library(pdftools)
library(stringr)
rr_text <- pdf_text("20200721_HC632_CCS001_CCS1019402408-001_ISC_Russia_Report_Web_Accessible.pdf")
redact_n <- str_count(rr_text, pattern = "\\*\\*\\*")
rr_tib <- tibble(page = 1:length(rr_text),
text = rr_text,
redactions = redact_n)
ggplot(rr_tib, aes(x=redactions)) +
geom_histogram(binwidth = 1, fill = "firebrick", color = "white") +
labs(x = "Number of redactions",
y = "Count",
title = "Histogram of redactions on each page of the Russia Report") +
theme_classic()
rr_tib %>%
filter(redactions > 10) %>%
select(page, redactions) %>%
arrange(redactions)
gsub(pattern = "\\*\\*\\*",
replace = "\\*\\*\\*[redacted]\\*\\*\\*",
x = rr_tib$text[37:39]) %>%
writeLines()
library(tidytext)
rr_words <- rr_tib %>%
select(page,text) %>%
unnest_tokens(word, # the name of the new column
text) # the column with text
rr_words %>%
head(10) %>%
kable()
9+11
library(tidyverse)
library(haven)
library(srvyr)
library(quantreg)
library(survey)
library(broom)
ESS9e02 <- read_sav("ESS9e02.sav")
dat <- ESS9e02 %>%
select(happy,
gndr,
agea,
cntry,
pspwght)
raw_obs <- dat %>%
group_by(cntry) %>%
summarise(n_raw = n())
dat_svy <- dat %>%
as_survey_design(weights = pspwght)
summary(dat$agea)
table(cut(dat$agea, seq(15,90,5), include.lowest = T))
mean_happy <- dat_svy %>%
mutate(age_grp = cut(agea, seq(15,90,5))) %>%
select(age_grp, cntry, happy) %>%
na.omit() %>%
group_by(cntry, age_grp) %>%
summarise(Happiness = survey_mean(happy))
mean_happy
age_group_names <- levels(mean_happy$age_grp)
age_group_names
whichLabels <- c(2,
floor(length(age_group_names)/2 + 1),
length(age_group_names) - 1)
mean_happy %>%
ggplot(aes(x = age_grp, y = Happiness,
ymin = Happiness - 1.96*Happiness_se,
ymax = Happiness + 1.96*Happiness_se)) +
geom_pointrange() +
geom_line(group = 1) +
scale_x_discrete(breaks = age_group_names[whichLabels]) +
facet_wrap(vars(cntry), ncol = 3) +
labs(x = "Age group", y = "Mean happiness")
theLambda <- 15
dat %>%
select(agea, happy, cntry, pspwght) %>%
na.omit %>%
ggplot(aes(x = agea, y = happy, size = pspwght)) +
geom_jitter(alpha = 0.2) +
scale_size(range = c(.8, 2), name="Weight") +
geom_quantile(quantiles = c(.5),
method = "rqss",
formula = y ~ qss(x, lambda = theLambda),
size = 1.5,
alpha = 1,
col = "lightgreen") +
geom_quantile(quantiles = c(.1, .2, .8, .9),
method = "rqss",
formula = y ~ qss(x, lambda = theLambda),
size = .8,
alpha = .8,
col = "lightgreen") +
facet_wrap(vars(cntry), ncol = 3) +
labs(x = "Age", y = "Happiness") +
scale_x_continuous() +
scale_y_continuous() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_rect(fill = "white"))
svy_gb <- dat_svy %>%
filter(cntry == "GB")
mod_gb <- svy_gb %>%
svyglm(happy ~ agea + I(agea^2),
design = .,
influence = T)
summary(mod_gb)
tidy(mod_gb)
happy_run <- function(the_design) {
the_design %>%
svyglm(happy ~ agea + I(agea^2),
design = .) %>%
tidy()
}
dat_svy %>%
filter(cntry == "GB") %>%
happy_run()
cs <- unique(dat_svy$variables$cntry)
table(cs)
u_happy_coefs <- cs %>%
map_dfr(function (x)
dat_svy %>%
filter(cntry == x) %>%
happy_run() %>%
mutate(cntry = x, .before = "term")
)
u_happy_coefs
threshold = 2
u_happy_coef_wide <- u_happy_coefs %>%
select(cntry, term, statistic) %>%
pivot_wider(names_from  = "term",
values_from = "statistic") # the z-score
u_happy_coef_wide <- u_happy_coef_wide %>%
mutate(class =
case_when(
agea < -threshold & `I(agea^2)` > threshold ~ "U-shaped",
agea >  threshold & `I(agea^2)` < -threshold ~ "inverted-U",
agea < -threshold &
abs(`I(agea^2)`) < threshold              ~ "linear decrease",
agea > threshold &
abs(`I(agea^2)`) < threshold              ~ "linear increase",
agea > 0 &
abs(`I(agea^2)`) > threshold              ~ "quadratic increase",
agea < 0 &
abs(`I(agea^2)`) < -threshold              ~ "quadratic increase",
abs(agea) < threshold &
abs(`I(agea^2)`) < threshold              ~ "constant",
TRUE ~ "other"
)
)
u_happy_coef_wide %>%
ggplot(aes(y = `I(agea^2)`, x = agea, label = cntry, colour = class)) +
geom_text(check_overlap = TRUE) +
labs(y = bquote(age^2~"(z statistic)"),
x = "age (z statistic)") +
geom_vline(xintercept = 0) +
geom_hline(yintercept = 0) +
xlim(-4,4) +
ylim(-4,4)
library(tidyverse)
library(haven)
library(srvyr)
library(quantreg)
library(survey)
library(broom)
ESS9e02 <- read_sav("ESS9e02.sav")
dat <- ESS9e02 %>%
select(happy,
gndr,
agea,
cntry,
pspwght)
raw_obs <- dat %>%
group_by(cntry) %>%
summarise(n_raw = n())
dat_svy <- dat %>%
as_survey_design(weights = pspwght)
summary(dat$agea)
table(cut(dat$agea, seq(15,90,5), include.lowest = T))
mean_happy <- dat_svy %>%
mutate(age_grp = cut(agea, seq(15,90,5))) %>%
select(age_grp, cntry, happy) %>%
na.omit() %>%
group_by(cntry, age_grp) %>%
summarise(Happiness = survey_mean(happy))
mean_happy
age_group_names <- levels(mean_happy$age_grp)
age_group_names
whichLabels <- c(2,
floor(length(age_group_names)/2 + 1),
length(age_group_names) - 1)
mean_happy %>%
ggplot(aes(x = age_grp, y = Happiness,
ymin = Happiness - 1.96*Happiness_se,
ymax = Happiness + 1.96*Happiness_se)) +
geom_pointrange() +
geom_line(group = 1) +
scale_x_discrete(breaks = age_group_names[whichLabels]) +
facet_wrap(vars(cntry), ncol = 3) +
labs(x = "Age group", y = "Mean happiness")
theLambda <- 15
dat %>%
select(agea, happy, cntry, pspwght) %>%
na.omit %>%
ggplot(aes(x = agea, y = happy, size = pspwght)) +
geom_jitter(alpha = 0.2) +
scale_size(range = c(.8, 2), name="Weight") +
geom_quantile(quantiles = c(.5),
method = "rqss",
formula = y ~ qss(x, lambda = theLambda),
size = 1.5,
alpha = 1,
col = "lightgreen") +
geom_quantile(quantiles = c(.1, .2, .8, .9),
method = "rqss",
formula = y ~ qss(x, lambda = theLambda),
size = .8,
alpha = .8,
col = "lightgreen") +
facet_wrap(vars(cntry), ncol = 3) +
labs(x = "Age", y = "Happiness") +
scale_x_continuous() +
scale_y_continuous() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_rect(fill = "white"))
svy_gb <- dat_svy %>%
filter(cntry == "GB")
mod_gb <- svy_gb %>%
svyglm(happy ~ agea + I(agea^2),
design = .,
influence = T)
summary(mod_gb)
tidy(mod_gb)
happy_run <- function(the_design) {
the_design %>%
svyglm(happy ~ agea + I(agea^2),
design = .) %>%
tidy()
}
dat_svy %>%
filter(cntry == "GB") %>%
happy_run()
cs <- unique(dat_svy$variables$cntry)
table(cs)
u_happy_coefs <- cs %>%
map_dfr(function (x)
dat_svy %>%
filter(cntry == x) %>%
happy_run() %>%
mutate(cntry = x, .before = "term")
)
u_happy_coefs
threshold = 2
u_happy_coef_wide <- u_happy_coefs %>%
select(cntry, term, statistic) %>%
pivot_wider(names_from  = "term",
values_from = "statistic") # the z-score
u_happy_coef_wide <- u_happy_coef_wide %>%
mutate(class =
case_when(
agea < -threshold & `I(agea^2)` > threshold ~ "U-shaped",
agea >  threshold & `I(agea^2)` < -threshold ~ "inverted-U",
agea < -threshold &
abs(`I(agea^2)`) < threshold              ~ "linear decrease",
agea > threshold &
abs(`I(agea^2)`) < threshold              ~ "linear increase",
agea > 0 &
abs(`I(agea^2)`) > threshold              ~ "quadratic increase",
agea < 0 &
abs(`I(agea^2)`) < -threshold              ~ "quadratic increase",
abs(agea) < threshold &
abs(`I(agea^2)`) < threshold              ~ "constant",
TRUE ~ "other"
)
)
u_happy_coef_wide %>%
ggplot(aes(y = `I(agea^2)`, x = agea, label = cntry, colour = class)) +
geom_text(check_overlap = TRUE) +
labs(y = bquote(age^2~"(z statistic)"),
x = "age (z statistic)") +
geom_vline(xintercept = 0) +
geom_hline(yintercept = 0) +
xlim(-4,4) +
ylim(-4,4)
5/60
6/60
10/60
setwd("~/GitHub/burns")
knitr::opts_chunk$set(echo = TRUE)
library(readr)
burndat <- read_csv("burndat.csv")
View(burndat)
library(tidyverse)
burndat
as.matrix(burndat)
burndat[-1] %>%
as.matrix()
burnmat <- burndat[-1] %>%
as.matrix()
rownames(burnmat) <- burndat$Diagnosis
burnmat
chisq.test(burnmat)
cst <- chisq.test(burnmat)
str(cst)
cst$stdres
cst <- chisq.test(burnmat)
chisq.test(burnmat)
?pivot_longer
burnlong <- burndat %>%
pivot_longer(names_to = "Burn_Type", values_to = "n")
burnlong <- burndat %>%
pivot_longer(cols = -Diagnosis, names_to = "Burn_Type", values_to = "n")
burnlong <- burndat %>%
pivot_longer(cols = -Diagnosis, names_to = "Burn_Type", values_to = "n")
burnlong
burnlong <- burndat %>%
pivot_longer(cols = -Diagnosis, names_to = "Burn_Type", values_to = "n")
burnlong %>%
unnest()
burnlong
?uncount
burnlong %>% uncount()
burnlong %>% uncount(weights = n)
burnlong <- burndat %>%
pivot_longer(cols = -Diagnosis, names_to = "Burn_Type", values_to = "n")
burnlonglong <- burnlong %>% uncount(weights = n)
View(burnlonglong)
library(rpart)
library(rpart)
res <- rpart(Burn_Type ~  Diagnosis, data = burnlonglong)
plot(res)
res
?rpart
res <- rpart(Diagnosis ~ Burn_Type, data = burnlonglong)
res
plot(res)
res <- rpart(Diagnosis ~ Burn_Type, data = burnlonglong)
res
prp(mod, type = 5, extra = 4)
library(rpart.plot)
prp(mod, type = 5, extra = 4)
prp(res, type = 5, extra = 4)
?prp
prp(res, type = 1, extra = 4)
prp(res, type = 5, extra = 4)
prp(res, type = 5, extra = 0)
prp(res, type = 5, extra = 1)
prp(res, type = 5, extra = 4)
prp(res, type = 5, extra = 7)
prp(res, type = 5, extra = 9)
prp(res, type = 5, extra = 11)
prp(res)
prp(res, type = 5)
prp(res, type = 4)
prp(res, type = 5)
prp(res, type = 5, extra = 104)
prp(res, type = 5, extra = 4)
prp(res, type = 5, extra = 104)
prp(res, type = 5, extra = 4)
rpart.rules(res, cover = TRUE)
rpart.rules(res)
res <- rpart(Diagnosis ~ Burn_Type, data = burnlonglong)
res
rpart.rules(res) %>%
kable()
library(knitr)
res <- rpart(Diagnosis ~ Burn_Type, data = burnlonglong)
res
rpart.rules(res) %>%
kable()
res
str(rpart.rules(res))
plot(res)
prp(res)
prp(res, compress = F)
prp(res, compress = F, type = 1)
prp(res, compress = F, type = 5)
prp(res, compress = F, type = 5, extra = 5)
